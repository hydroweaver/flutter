def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    aaptOptions {
        noCompress 'tflite'
        noCompress 'lite'
    }

    defaultConfig {
        applicationId "com.xinthink.flttf"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

// afterEvaluate {
//     android.applicationVariants.all { def variant ->
//         // Create variant and target names
//         def targetName = variant.name.capitalize()
//         def targetPath = variant.dirName

//         // models path for the variant
//         def modelsDir = file("$buildDir/generated/assets/models/${targetPath}")
//         def modelsSrc = rootProject.file('../models')

//         def bundleModelsTask = tasks.create(
//             name: "bundle${targetName}TensorFlowModels",
//             type: Copy
//         ) {
//             group = "tensorflow"
//             description = "bundle TensorFlow Lite models for $targetName."

//             doFirst {
//                 delete modelsDir
//                 modelsDir.mkdirs()
//             }

//             // Set up inputs and outputs so gradle can cache the result
//             inputs.files fileTree(dir: modelsSrc, includes: ['*.tflite'])
//             outputs.dir(modelsDir)

//             from modelsSrc
//             include '*.tflite'
//             into modelsDir
//         }

//         tasks.findByPath("generate${targetName}Assets")?.dependsOn bundleModelsTask
//     }
// }
